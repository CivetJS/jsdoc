/**
 * Function is called by JSDocs deucumentation generator. function takes
 * set of symbols representing the source of the files to be documented.
 * @param {Symbol} symbolSet    Object representing source <i/>(Object can
 * represent class, object, memeber of the class, comment)</i>
 * @param {JSDOC}
 */
exports.publish = function publish(symbolSet, files, Plugins) {
    Log.debug('Setting static varibales');
    /**
     * Map of files paths and data that will be written.
     * @type {String}
     */
    var docs = {};
    /**
     * Title for the doc pages
     * @type {String}
     */
    var title = 'JSDoc Reference ';
    var footer = 'Documentation generated by JSDocs 0.1 on ' + new Date().toString();
    var header = 'JSDoc Reference';

    Log.debug('Reading symbols');
    var symbols = symbolSet.toArray();
    Log.debug('Filtering out classes');
    var classes = symbols.filter(function(symbol) {
        return (symbol.is('CONSTRUCTOR') || symbol.isNamespace);
    }).sort(makeSortby('alias'));

    Log.debug('Creating templates');
    var css = Plugins.getContent('styles.css');
    var ieFix = Plugins.getContent('ieFix.css');
    var listTemplate = new Plugins.Template('list.xhtml', 'index');
    Log.debug('List template is created');
    var indexTemplate = new Plugins.Template('index.xhtml');
    Log.debug('Index template is created');
    var classTemplate = new Plugins.Template('class.xhtml');
    Log.debug('Class template is created');
    var codeTemplate = new Plugins.Template('code.xhtml');
    Log.debug('Code template is created');

    Log.debug('Rendering list widget template');
    list = listTemplate.render({
        classes: classes.map(function(element) {
            return {
                name: element.name,
                link: (escapePath(element.srcFile || '') + '@' + element.name + '.html')
            };
        }),
        files: files.map(function(file) {
            return {
                path: file.toString(),
                link: (escapePath(file) + '.html')
            };
        })
    });

    Log.debug('Rendering index page template');
    Plugins.publish({
        'index.html': indexTemplate.render({
            page: {
                title: title,
                style: css,
                ieFix: ieFix,
                header: header,
                footer: footer
            },
            classes: classes.map(function(element) {
                return {
                    name: element.name,
                    link: (escapePath(element.srcFile || '') + '@' + element.name + '.html')
                };
            }),
            list: list
        })
    });

    Log.debug('Start rendering class templates');
    classes.map(function(data) {
        var alias = data.alias;
        // Grouping fields by owners
        var fieldOwners = {};
        data.properties.forEach(function(field) {
            if (!fieldOwners[field.memberOf])
                fieldOwners[field.memberOf] = { self: field.memberOf, fields: [] };
            fieldOwners[field.memberOf].fields.push(field);
        });
        var ownFields = fieldOwners[alias] ? fieldOwners[alias].fields : [];
        delete fieldOwners[alias];
        // Grouping methods by owners
        var methodOwners = {};
        data.methods.forEach(function(method) {
            if(!methodOwners[method.memberOf])
                methodOwners[method.memberOf] = { self: method.memberOf, methods: [] };
            methodOwners[method.memberOf].methods.push(method);
        })
        var ownMethods = methodOwners[alias] ? methodOwners[alias].methods : [];
        delete methodOwners[alias];

        return {
            // exposing some utils
            highlight: Plugins.syntaxHighlight,
            // Template additions
            page: {
                title: title + alias,
                style: css,
                ieFix: ieFix,
                header: header,
                footer: footer
            },
            // Class name & link
            name: data.name,
            alias: data.alias,
            link: '#' + data.name,
            classDesc: data.classDesc,
            // Class type
            isBuiltin: data.isBuiltin(),
            isConstructor: data.is('CONSTRUCTOR'),
            isFunction: data.is('FUNCTION'),
            isNamespace: data.isNamespace,
            isPrivate: data.isPrivate,
            isInner: data.isInner,
            // Source data
            srcFile: data.srcFile,
            // Class extends
            inheritsFrom: data.augments.sort(),
            // Class summary
            hasSummary: (!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))),
            highlighted: (data.comment.getTag("hilited").length ? 'hilited' : ''),
            // constructor
            constructorLink: data.alias,
            params: data.params,
            desc: data.desc,
            // Fields
            //inheritsFrom: data.inheritsFrom,
            fields: data.properties,
            ownFields: ownFields.sort(makeSortby('name')),
            hasInheritedFields: (data.properties.length != ownFields.length),
            fieldOwners: fieldOwners,
            // Methods
            methods: data.methods,
            ownMethods: ownMethods.sort(makeSortby('name')),
            hasInheritedMethods: (data.methods.length != ownMethods.length),
            methodOwners: methodOwners,
            // details
            author: data.author,
            example: data.example,
            // additional
            deprecated: data.deprecated,
            author: data.author,
            see: data.see,
            since: data.since,
            // subtemplate
            list: list
            };
    }).forEach(function(element) {
        var path = element.srcFile || '',
            data = {};
        data[escapePath(path + '@' + element.name + '.html')] = classTemplate.render(element);
        Plugins.publish(data);
    });


    Log.debug('Start rendering file source temapltes');
    files.forEach(function(file) {
        try {
            Log.debug('Syntax highlighting file : ' + file);
            var code = Plugins.syntaxHighlight(file).split('<br/>');
            Log.debug('rendering source template for : ' + file);
            var data = {};
            data[escapePath(file + '.html')] = codeTemplate.render({
                page: {
                    title: title,
                    style: css,
                    ieFix: ieFix,
                    header: header,
                    footer: footer
                },
                // hack to fix ie behavior in pre element
                code: code.join('\n'),
                lines: code.map(function(value, index) {
                    return ++index;
                }),
                // subtemplate
                list: list
            });
            Plugins.publish(data);
        } catch (e) {
            Log.error('Could not highlight source for : ' + file + ' : ' + e.message);
        }
    });
    Log.debug('Finished rendering templates');
    return docs;
};

function makeSortby(key) {
    return function(a, b) {
        if (a[key] !== undefined && b[key] !== undefined) {
            a = a[key].toLowerCase();
            b = b[key].toLowerCase();
            if (a < b) return -1;
            if (a > b) return 1;
        }
        return 0;
    };
};

function escapePath(path) {
    return path.replace(/[\\\/]/g, '+')
        .replace(/\:/g, '=');
}

